name: "Build iOS app"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive
        working-directory: Action
        run: |
          xcodebuild \
            -scheme "Action" \
            -archivePath $RUNNER_TEMP/action.xcarchive \
            -sdk iphoneos \
            -configuration Release \
            -destination generic/platform=iOS \
            -allowProvisioningUpdates \
            clean archive

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/action.xcarchive \
            -exportOptionsPlist $EXPORT_OPTS_PATH \
            -exportPath $RUNNER_TEMP/build \
            -allowProvisioningUpdates

      - name: Rename ipa
        run: mv $RUNNER_TEMP/build/*.ipa $RUNNER_TEMP/build/action.ipa

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ runner.temp }}/build/action.ipa
          retention-days: 3

  upload_to_testflight:
    needs: build_with_signing
    runs-on: macos-latest
    steps:
      - name: Download app artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ${{ runner.temp }}/build

      - name: Install fastlane
        run: gem install fastlane

      - name: Create API key JSON
        run: |
          echo '{
            "key_id": "${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
            "key": "${{ secrets.APP_STORE_CONNECT_KEY }}",
            "in_house": false
          }' > $RUNNER_TEMP/api_key.json

      - name: Upload to TestFlight
        run: |
          fastlane pilot upload \
            --api_key_path $RUNNER_TEMP/api_key.json \
            --ipa ${{ runner.temp }}/build/action.ipa \
            --skip_waiting_for_build_processing true
